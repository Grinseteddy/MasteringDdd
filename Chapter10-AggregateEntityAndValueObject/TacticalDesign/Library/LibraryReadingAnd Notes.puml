@startuml
'https://plantuml.com/class-diagram

@startuml
'https://plantuml.com/class-diagram

'left to right direction
top to bottom direction
hide empty members
skinparam linetype polyline
allowmixing


skinparam class {
    backgroundcolor #FFFFFF
    backgroundcolor<<Aggregate>> #CCCCCC
    backgroundcolor<<Entity>> #DDDDDD
    backgroundcolor<<Value Object>> #EEEEEE

    bordercolor grey
    fontcolor black
    fontcolor<<Aggregate>> black
    fontcolor<<Entity>> balck
    fontcolor<<Value Object>> black

    attributefontcolor black
    attributefontsize 12
    attributefontcolor<<Aggregate>> black

    stereotypefontcolor black
    stereotypefontsize 8


}

skinparam arrow {
    color grey
    fontcolor grey
    fontsize 10
}

skinparam storage {
    backgroundcolor white
    bordercolor grey
    borderstyle dashed
    fontcolor grey
}

skinparam note {
    backgroundcolor white
    fontcolor grey
    fontstyle italic
    fontsize 10
    bordercolor grey

}


storage Notes {
    class "IndividualNote" as individualNote <<(A, #FFFFFF) Aggregate>> {
        * id: uuid
        note: string
        text: Position
        * book: uuid
        * status: Status
        + create(Position position)
    }

    class "Position" as position <<(V, #FFFFFF) Value Object>> {
        * start: unsignedInteger
        * end: unsignedInteger
    }

    enum "Status" as statusNote <<(N, FFFFFF)>> {
        CREATED
        DELETED
    }

    individualNote *-down- position
    individualNote *-"1" statusNote

}

storage Reading {
    class "BookRead" as bookRead <<(A, #FFFFFF) Aggregate>> {
        *id: uuid
        *lendingEntry: uuid
        *title: string
        *authors: array of string
        readingPosition: array of unsignedInteger
        * status: Status
    }

    class "BookShelf" as bookShelf <<(A, #FFFFFF) Aggregate>> {
        * id: uuid
        * owner: uuid
    }

    note right  {
        Reader of book is
        the owner of
        the bookshelf.
    }

    enum "Status" as statusBookRead <<(N, #FFFFFF)>> {
        NOT_STARTED
        READ
        FINISHED
    }

    bookShelf *--"0..*" bookRead
    bookRead *--"1" statusBookRead

}



individualNote ..> bookRead : use


@enduml

@enduml