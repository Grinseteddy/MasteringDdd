@startuml
'https://plantuml.com/class-diagram

skinparam linetype ortho
allowmixing
skinparam nodesep 3
skinparam ranksep 20

skinparam component {
    bordercolor grey
    fontcolor black
}

skinparam actor {
    bordercolor grey
    fontcolor black
}

skinparam class {
    backgroundcolor #FFFFFF
    backgroundcolor<<Aggregate>> #CCCCCC
    backgroundcolor<<Entity>> #DDDDDD
    backgroundcolor<<Value Object>> #EEEEEE

    bordercolor grey
    fontcolor black
    fontcolor<<Aggregate>> black
    fontcolor<<Entity>> black
    fontcolor<<Value Object>> black

    attributefontcolor black
    attributefontsize 14
    attributefontcolor<<Aggregate>> grey

    methodfontsize 12

    stereotypefontcolor black
    stereotypefontsize 14


}

skinparam arrow {
    color black
    fontcolor black
    fontsize 12
}

skinparam queue {
    backgroundcolor #FFFFFF
    backgroundcolor<<Aggregate>> #CCCCCC
    backgroundcolor<<Entity>> #DDDDDD
    backgroundcolor<<Value Object>> #EEEEEE

    bordercolor grey
    fontcolor black
    fontcolor<<Aggregate>> black
    fontcolor<<Entity>> black
    fontcolor<<Value Object>> black

    attributefontcolor grey
    attributefontsize 12
    attributefontcolor<<Aggregate>> grey

    stereotypefontcolor grey
    stereotypefontsize 12


}

skinparam database {
    backgroundcolor #FFFFFF
    backgroundcolor<<Aggregate>> #CCCCCC
    backgroundcolor<<Entity>> #DDDDDD
    backgroundcolor<<Value Object>> #EEEEEE

    bordercolor grey
    fontcolor black
    fontcolor<<Aggregate>> black
    fontcolor<<Entity>> black
    fontcolor<<Value Object>> black

    attributefontcolor grey
    attributefontsize 12
    attributefontcolor<<Aggregate>> grey

    stereotypefontcolor grey
    stereotypefontsize 12


}


component "Catalog Management" as catalogManagement {
    component "Catalog Factory" as catalogFactory {
        class "Catalog" as catalogWrite {
            update(CatalogEntry)
        }
        interface "Catalog" as catalogInterface {
            post(CatalogEntry)
            put(CatalogEntry)
        }
        database "Catalog" as catalogWriteDb {
        }
    }

    component "Catalog Query" {
        class "Catalog" as catalogRead {
            search(SearchCriteria)
        }
        interface "Catalog" as catalogReadInterface {
            get(SearchCriteria)
        }
        database "Catalog" as catalogReadDb {
        }
    }
}

queue "Library" as libraryQueue {

}

actor "Librarian" as librarian
actor "Member" as member

catalogInterface -down- catalogWrite
catalogReadInterface -down- catalogRead

catalogWrite -right-> libraryQueue : produceEvent\n(catalogEntryCreated)
catalogRead -left-> libraryQueue : consumeEvent\n(catalogEntryCreated)

catalogWrite --> catalogWriteDb
catalogRead --> catalogReadDb

librarian --> catalogInterface
'librarian --> catalogReadInterface
member --> catalogReadInterface

'layout

catalogWriteDb ---[hidden]--- libraryQueue
catalogReadDb ---[hidden]--- libraryQueue
@enduml